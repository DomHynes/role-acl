import { IAccessInfo, IQueryInfo, ICondition } from './core';
declare const utils: {
    clone(o: any): any;
    type(o: any): string;
    hasDefined(o: any, propName: string): boolean;
    toStringArray(value: any): string[];
    toArray(value: any): any[];
    isFilledStringArray(arr: any[]): boolean;
    isStringOrArray(value: any): boolean;
    isEmptyArray(value: any): boolean;
    uniqConcat(arrA: string[], arrB: string[]): string[];
    subtractArray(arrA: string[], arrB: string[]): string[];
    eachKey(o: any, callback: (key: string, index?: number) => void): void;
    getFlatRoles(grants: any, roles: string | string[], context?: any, skipConditions?: boolean): string[];
    normalizeGrantsObject(grants: any): any;
    normalizeQueryInfo(query: IQueryInfo): IQueryInfo;
    normalizeAccessInfo(access: IAccessInfo): IAccessInfo;
    resetAttributes(access: IAccessInfo): IAccessInfo;
    isInfoFulfilled(info: IAccessInfo | IQueryInfo): boolean;
    commitToGrants(grants: any, access: IAccessInfo): void;
    getUnionAttrsOfRoles(grants: any, query: IQueryInfo): string[];
    getUnionGrantsOfRoles(grants: any, role: string | string[]): IAccessInfo[];
    getUnionResourcesOfRoles(grants: any, role: string | string[]): string[];
    getUnionActionsOfRoles(grants: any, role: string | string[], resource: string): string[];
    areGrantsAllowing(grants: IAccessInfo[], query: IQueryInfo): boolean;
    areExtendingRolesAllowing(roleExtensionObject: any, allowingRoles: any, query: IQueryInfo): boolean;
    getAllowingRoles(grants: any, query: IQueryInfo): string[];
    getNonExistentRoles(grants: any, roles: string[]): string[];
    extendRole(grants: any, roles: string | string[], extenderRoles: string | string[], condition?: ICondition): void;
    matchesAllElement(values: any, predicateFn: (elm: any) => boolean): any;
    matchesAnyElement(values: any, predicateFn: (elm: any) => boolean): any;
    filter(object: any, attributes: string[]): any;
    filterAll(arrOrObj: any, attributes: string[]): any;
};
export default utils;
